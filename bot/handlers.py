from aiogram import Router, types, F
from aiogram.filters import Command
import asyncio
from aiogram.fsm.context import FSMContext
from .states import UserSetup
from .keyboards import get_grade_keyboard, get_language_keyboard, get_sphere_keyboard
from .models import Grade, Language, Sphere, User, User_Answer
from asgiref.sync import sync_to_async
import logging
from .ai.questions import generate_questions, assess_answer, generate_verdict

logging.basicConfig(level=logging.INFO)
router = Router()



@router.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    try:
        greeting = (
        "üëã –ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥!\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ø—Ä–æ–∫–∞—á–∞—Ç—å—Å—è –≤ IT.\n\n"
        "–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–≤–æ–π —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π, –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–µ–º–∞–º –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è, "
        "–∞ —Ç–∞–∫–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º.\n\n"
        "–°–µ–π—á–∞—Å —è –∑–∞–¥–∞–º —Ç–µ–±–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî —ç—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ –±–æ–ª—å—à–µ –ø–∞—Ä—ã –º–∏–Ω—É—Ç.\n"
        "–í—Å—ë –ø—Ä–æ—Å—Ç–æ: –æ—Ç–≤–µ—á–∞–µ—à—å —á–µ—Å—Ç–Ω–æ, –∞ —è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å—Ñ–æ—Ä–º–∏—Ä—É—é —Ç–≤–æ–∏ —Ç–æ—á–∫–∏ —Ä–æ—Å—Ç–∞.\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ ‚Äî –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å:"
        )
        await message.answer(greeting, reply_markup=await get_grade_keyboard())
        await state.set_state(UserSetup.choosing_grade)
    except Exception as exc:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /start: {exc}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(UserSetup.choosing_grade)
async def process_grade(message: types.Message, state: FSMContext):
    grade = await sync_to_async(Grade.objects.filter(name=message.text).first)()
    if grade:
        await sync_to_async(User.objects.update_or_create)(
            user_id=message.from_user.id,
            defaults={"grade": grade}
        )
        await message.answer("–°—Ñ–µ—Ä–∞ –≤—ã–±—Ä–∞–Ω–∞‚úÖ")
        await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —è–∑—ã–∫: ", reply_markup=await get_language_keyboard())
        await state.set_state(UserSetup.choosing_language)
    else:
        await message.answer("–ì—Ä–µ–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–±–µ—Ä–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.")

@router.message(UserSetup.choosing_language)
async def process_language(message: types.Message, state: FSMContext):
    language = await sync_to_async(Language.objects.filter(name=message.text).first)()
    if language:
        await sync_to_async(User.objects.update_or_create)(
            user_id=message.from_user.id,
            defaults={"language": language}
        )
        keyboard = await get_sphere_keyboard(language)
        if not keyboard.keyboard:
            await message.answer("–î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ñ–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —è–∑—ã–∫.")
            return
        await message.answer("–Ø–∑—ã–∫ –≤—ã–±—Ä–∞–Ω‚úÖ")
        await message.answer("–î–∞–ª–µ–µ –≤—ã–±–µ—Ä–∏ —Å—Ñ–µ—Ä—É: ", reply_markup=keyboard)
        await state.set_state(UserSetup.choosing_sphere)
    else:
        await message.answer("–Ø–∑—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞.")

@router.message(UserSetup.choosing_sphere)
async def process_sphere(message: types.Message, state: FSMContext):
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–±—Ä–∞–ª —Å—Ñ–µ—Ä—É: {message.text}")
        user = await sync_to_async(User.objects.select_related('language').get)(user_id=message.from_user.id)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ñ–µ—Ä—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        sphere = await sync_to_async(Sphere.objects.filter(name=message.text).first)()
        
        if sphere:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ñ–µ—Ä–æ–π
            await sync_to_async(User.objects.update_or_create)(
                user_id=message.from_user.id,
                defaults={"sphere": sphere}
            )

            await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞‚úÖ \n–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –≤–æ–ø—Ä–æ—Å—ã....")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
            user = await sync_to_async(
                User.objects.select_related('grade', 'language', 'sphere').get
            )(user_id=message.from_user.id)
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–≤—è–∑–∞–Ω–Ω—ã–º –ø–æ–ª—è–º –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            stack = {
                "grade": await sync_to_async(lambda: user.grade.name if user.grade else None)(),
                "language": await sync_to_async(lambda: user.language.name if user.language else None)(),
                "sphere": await sync_to_async(lambda: user.sphere.name if user.sphere else None)()
            }
            logging.info(f"Stack –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {stack}")

            questions, correct_answers = await generate_questions(stack)
            
            if not questions:
                # –õ–æ–≥–∏—Ä—É–µ–º –∏ —Å–æ–æ–±—â–∞–µ–º, –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –±—ã–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Å—Ñ–µ—Ä—ã: {message.text}")
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(questions=questions, current_question=0, correct_answers=correct_answers, answers=[])
            await message.answer(f"–í–æ–ø—Ä–æ—Å: {questions[0]}")   
            await state.set_state(UserSetup.answering_questions)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        else:
            # –õ–æ–≥–∏—Ä—É–µ–º –∏ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞–π—Ç–∏ —Å—Ñ–µ—Ä—É
            logging.warning(f"–°—Ñ–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {message.text}")
            await message.answer("–°—Ñ–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞.")
    except Exception as exc:
        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ñ–µ—Ä—ã: {exc}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


import re

def clean_question(raw_question: str) -> str:
    """
    –£–¥–∞–ª—è–µ—Ç –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –∏ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Å—Ç—Ä–æ–∫–µ.
    """
    # –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ—Å–ª–µ —Å–ª–æ–≤–∞ '–û—Ç–≤–µ—Ç' –∏–ª–∏ 'Otvet'
    raw_question = re.split(r"(–û—Ç–≤–µ—Ç|Otvet)\s*:", raw_question, flags=re.IGNORECASE)[0]
    # –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞ –≤ –Ω–∞—á–∞–ª–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1. –í–æ–ø—Ä–æ—Å: ..." –∏–ª–∏ "2.")
    raw_question = re.sub(r"^\s*\d+\.\s*", "", raw_question)
    # –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–µ–≥–æ —Å–ª–æ–≤–∞ "–í–æ–ø—Ä–æ—Å", –µ—Å–ª–∏ –µ—Å—Ç—å
    raw_question = re.sub(r"–í–æ–ø—Ä–æ—Å\s*:\s*", "", raw_question, flags=re.IGNORECASE)
    return raw_question.strip()


@router.message(UserSetup.answering_questions)
async def process_answers(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        questions = data.get("questions", [])
        correct_answers = data.get("correct_answers", [])
        current = data.get("current_question", 0)
        answers = data.get("answers", [])

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if not questions or not correct_answers or current >= len(questions):
            await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
            await state.clear()
            return

        # –û—á–∏—Å—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç –Ω–æ–º–µ—Ä–∞ –∏ –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
        raw_question = questions[current]
        question_text = clean_question(raw_question)

        user = await sync_to_async(User.objects.get)(user_id=message.from_user.id)
        user_answer = message.text
        correct_answer = correct_answers[current]

        # –ê–Ω–∞–ª–∏–∑ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é
        confidence_score = await assess_answer(user_answer, correct_answer)
        is_correct = confidence_score >= 0.75

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        await sync_to_async(User_Answer.objects.create)( 
            user=user, 
            question=question_text, 
            answer=user_answer, 
            is_correct=is_correct, 
            confidence_score=confidence_score
        )

        answers.append({
            "question": question_text,
            "your_answer": user_answer,
            "correct_answer": correct_answer,
            "is_correct": is_correct,
            "confidence_score": confidence_score
        })

        current += 1

        if current < len(questions):
            # –ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            await message.answer(f"‚åõ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ–π –æ—Ç–≤–µ—Ç... –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –≤–æ–ø—Ä–æ—Å ({current + 1} –∏–∑ {len(questions)})...")
            
            # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            await asyncio.sleep(2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞

            await state.update_data(current_question=current, answers=answers)
            next_question = clean_question(questions[current])
            await message.answer(f"–í–æ–ø—Ä–æ—Å ({current + 1} –∏–∑ {len(questions)}):\n{next_question}")
        else:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤
            await message.answer("–û—Ç–≤–µ—Ç—ã –ø—Ä–∏–Ω—è—Ç—ã, –ø—Ä–æ–≤–æ–∂—É –∏—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑....")
            await state.clear()
            correct_count = sum(1 for a in answers if a["is_correct"])
            total = len(answers)
            percent = (correct_count / total) * 100

            if percent >= 80:
                verdict = "üéâ –û—Ç–ª–∏—á–Ω–æ! –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Å–≤–æ–∏–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª."
            elif percent >= 50:
                verdict = "üôÇ –ù–µ–ø–ª–æ—Ö–æ, –Ω–æ —Å—Ç–æ–∏—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–º—ã."
            else:
                verdict = "üòï –ù—É–∂–Ω–æ –µ—â—ë –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —ç—Ç–∏–º –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º."

            result_msg = (
                f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_count} –∏–∑ {total} ({percent:.0f}%)\n"
                f"üìå {verdict}"
            )
            detailed_verdict = await generate_verdict(answers)

            await message.answer("–¢—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã! –í–æ—Ç —Ç–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
            await message.answer(result_msg)
            await message.answer(f"üìä –ê–Ω–∞–ª–∏–∑ —Ç–≤–æ–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤:\n{detailed_verdict}")

    except Exception as exc:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å: {exc}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()


